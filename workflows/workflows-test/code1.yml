id: code1
type: datasource
subtype: JavascriptQuery
resourceName: JavascriptQuery
template:
  ordered:
    - queryRefreshTime: ''
    - allowedGroupIds: []
    - streamResponse: false
    - lastReceivedFromResourceAt: null
    - queryDisabledMessage: ''
    - servedFromCache: false
    - offlineUserQueryInputs: ''
    - successMessage: ''
    - queryDisabled: ''
    - playgroundQuerySaveId: latest
    - workflowParams: null
    - resourceNameOverride: ''
    - runWhenModelUpdates: true
    - workflowRunId: null
    - showFailureToaster: true
    - query: |-
        const { sign } = require('jsonwebtoken');
        const crypto = require('crypto');

        const key_name = 'keyName'
        const key_secret = '123'
        const request_method = 'GET:'
        const url = 'https://www.npmjs.com'
        const request_path = '/package/jsonwebtoken'
        const uri = request_method + ' ' + url + request_path;

        const returnValue = sign(
          {
            iss: 'cdp',
            nbf: Math.floor(Date.now() / 1000),
            exp: Math.floor(Date.now() / 1000) + 120,
            sub: key_name,
            uri
          },
          key_secret,
          {
            algorithm: 'RS256',
            header: {
              kid: 'your-key-name',
              nonce: crypto.randomBytes(16).toString('hex')
            }
          }
        );
        return returnValue;
    - playgroundQueryUuid: ''
    - playgroundQueryId: null
    - error: null
    - workflowRunBodyType: raw
    - privateParams: []
    - workflowBlockUuid: null
    - queryRunOnSelectorUpdate: false
    - runWhenPageLoadsDelay: ''
    - data: null
    - importedQueryInputs:
        ordered: []
    - _additionalScope: []
    - isImported: false
    - showSuccessToaster: true
    - cacheKeyTtl: ''
    - requestSentTimestamp: null
    - metadata: null
    - workflowActionType: null
    - editorMode: sql
    - queryRunTime: null
    - changesetObject: ''
    - offlineOptimisticResponse: null
    - errorTransformer: >-
        // The variable 'data' allows you to reference the request's data in the
        transformer. 

        // example: return data.find(element => element.isError)

        return data.error
    - finished: null
    - confirmationMessage: null
    - isFetching: false
    - changeset: ''
    - rawData: null
    - queryTriggerDelay: '0'
    - resourceTypeOverride: null
    - watchedParams: []
    - enableErrorTransformer: false
    - showLatestVersionUpdatedWarning: false
    - timestamp: 0
    - evalType: script
    - importedQueryDefaults:
        ordered: []
    - enableTransformer: false
    - showUpdateSetValueDynamicallyToggle: true
    - overrideOrgCacheForUserCache: false
    - runWhenPageLoads: false
    - transformer: |-
        // Query results are available as the `data` variable
        return data
    - events: []
    - queryTimeout: '120000'
    - workflowId: null
    - requireConfirmation: false
    - queryFailureConditions: ''
    - changesetIsObject: false
    - enableCaching: false
    - allowedGroups: []
    - offlineQueryType: None
    - queryThrottleTime: '750'
    - updateSetValueDynamically: false
    - notificationDuration: ''
createdAt: 2024-10-09T21:17:50.746Z
blockData:
  top: 48
  left: 480
  uuid: e7829793-44c0-4b2b-8415-8c46b9325f03
  pluginId: code1
  blockType: code
  dimensions:
    width: 400
    height: 280
  editorType: JavascriptQuery
  resourceName: JavascriptQuery
  responsePanelState: open
  incomingOnSuccessEdges:
    - 7d899f80-070b-4c97-a847-4fba400e4f04
